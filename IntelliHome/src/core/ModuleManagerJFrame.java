/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package core;

import java.awt.Color;
import java.awt.event.KeyEvent;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Timer;
import java.util.TimerTask;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.text.BadLocationException;
import javax.swing.text.Style;
import javax.swing.text.StyleConstants;
import javax.swing.text.StyledDocument;

/**
 *
 * @author Josh
 */
public class ModuleManagerJFrame extends javax.swing.JFrame {
    private List<Module> pendingModules = new ArrayList<>();
    private List<Module> initializedModules = new ArrayList<>();

    private final NRFHub hub;
    /**
     * Creates new form UnregisteredModulesJFrame
     * @param hub the instance of NRFHub to sync with
     */
    public ModuleManagerJFrame(NRFHub hub) {
        initComponents();
        
        consoleDoc = txtpnConsoleView.getStyledDocument();
        stlBold = consoleDoc.addStyle("Bold", null);
        stlBold.addAttribute(StyleConstants.Bold, true);
        stlOrange = consoleDoc.addStyle("Orange", null);
        StyleConstants.setForeground(stlOrange, Color.ORANGE);
        stlGreen = consoleDoc.addStyle("Green", null);
        StyleConstants.setForeground(stlGreen, Color.GREEN);
        this.hub = hub;
        
        Timer syncTimer = new Timer();
        syncTimer.schedule(new TimerTask() {

            @Override
            public void run() {
                syncModuleLists();
            }
        }, 1000, 1000);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        titleLabel = new javax.swing.JLabel();
        scrlConsoleView = new javax.swing.JScrollPane();
        txtpnConsoleView = new javax.swing.JTextPane();
        txtCommand = new javax.swing.JTextField();
        txtExec = new javax.swing.JTextField();
        lblExec = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setPreferredSize(new java.awt.Dimension(350, 350));
        getContentPane().setLayout(new java.awt.GridBagLayout());

        titleLabel.setFont(titleLabel.getFont().deriveFont(titleLabel.getFont().getStyle() | java.awt.Font.BOLD, titleLabel.getFont().getSize()+7));
        titleLabel.setText("Module Manager");
        titleLabel.setToolTipText("");
        titleLabel.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 0, 0);
        getContentPane().add(titleLabel, gridBagConstraints);

        scrlConsoleView.setWheelScrollingEnabled(false);

        txtpnConsoleView.setEditable(false);
        txtpnConsoleView.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
        txtpnConsoleView.setMinimumSize(new java.awt.Dimension(200, 160));
        scrlConsoleView.setViewportView(txtpnConsoleView);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        getContentPane().add(scrlConsoleView, gridBagConstraints);

        txtCommand.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtCommandKeyPressed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 0, 0);
        getContentPane().add(txtCommand, gridBagConstraints);

        txtExec.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtExecKeyPressed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(1, 0, 0, 0);
        getContentPane().add(txtExec, gridBagConstraints);

        lblExec.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        lblExec.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        lblExec.setText("Execute:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(6, 0, 0, 0);
        getContentPane().add(lblExec, gridBagConstraints);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void txtCommandKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtCommandKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER){
            if (handleCommand(txtCommand.getText())){
                txtCommand.setText("");
//                scrlConsoleView.getVerticalScrollBar().setValue(scrlConsoleView.getVerticalScrollBar().getMaximum()+1);//TODO fix +4 here. Should not require it...
                txtpnConsoleView.setCaretPosition(txtpnConsoleView.getDocument().getLength());
            }
        }
    }//GEN-LAST:event_txtCommandKeyPressed

    private void txtExecKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtExecKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER){
            hub.execute(txtExec.getText());
            txtExec.setText("");
        }
    }//GEN-LAST:event_txtExecKeyPressed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel lblExec;
    private javax.swing.JScrollPane scrlConsoleView;
    private javax.swing.JLabel titleLabel;
    private javax.swing.JTextField txtCommand;
    private javax.swing.JTextField txtExec;
    private javax.swing.JTextPane txtpnConsoleView;
    // End of variables declaration//GEN-END:variables

    private Style stlBold;
    private Style stlOrange;
    private Style stlGreen;
    private StyledDocument consoleDoc;
    
    private void syncModuleLists(){
        boolean update = false;
        if (!initializedModules.containsAll(hub.getModules(NRFHub.ModuleInitFilter.INITIALIZED_MODULES))
                || !hub.getModules(NRFHub.ModuleInitFilter.INITIALIZED_MODULES).containsAll(initializedModules)){
            initializedModules = hub.getModules(NRFHub.ModuleInitFilter.INITIALIZED_MODULES);
            update = true;
        }
        if (!pendingModules.containsAll(hub.getModules(NRFHub.ModuleInitFilter.PENDING_MODULES))
                || !hub.getModules(NRFHub.ModuleInitFilter.PENDING_MODULES).containsAll(pendingModules)){
            pendingModules = hub.getModules(NRFHub.ModuleInitFilter.PENDING_MODULES);
            update = true;
        }
        update = true;
        if (update) {
            List<Integer> IDConflicts = getIDConflicts();
            try {
                consoleDoc.remove(0, consoleDoc.getLength());
                consoleDoc.insertString(consoleDoc.getLength(), "Initialized Modules:\n", stlBold);
                for (Module m : hub.getModules(NRFHub.ModuleInitFilter.INITIALIZED_MODULES)){
                    if (m.getmID() == 254 || IDConflicts.contains(m.getmID()))
                        consoleDoc.insertString(consoleDoc.getLength(), m.toString() + "\n", stlOrange);
                    else
                        consoleDoc.insertString(consoleDoc.getLength(), m.toString() + "\n", stlGreen);
                }
                consoleDoc.insertString(consoleDoc.getLength(), "Pending Modules:\n", stlBold);
                for (Module m : hub.getModules(NRFHub.ModuleInitFilter.PENDING_MODULES)){
                    if (m.getmID() == 254 || IDConflicts.contains(m.getmID()))
                        consoleDoc.insertString(consoleDoc.getLength(), m.toString() + "\n", stlOrange);
                    else
                        consoleDoc.insertString(consoleDoc.getLength(), m.toString() + "\n", stlGreen);
                }
            } catch (BadLocationException ex){
                ex.printStackTrace();
                //TODO Log error here
            }
        }
    }
    
    public synchronized List<Integer> getIDConflicts(){
        HashMap<Integer, Integer> IDCounts = new HashMap<>();
        for (Module m : hub.getModules(NRFHub.ModuleInitFilter.ALL_MODULES)){
            if (!IDCounts.containsKey(m.getmID()))
                IDCounts.put(m.getmID(),1);
            else
                IDCounts.put(m.getmID(),IDCounts.get(m.getmID()) + 1);
        }
        for (Integer ID : IDCounts.keySet().toArray(new Integer[] {}))
            if (IDCounts.get(ID) == null || IDCounts.get(ID) <= 1)
                IDCounts.remove(ID);
        List<Integer> result = new ArrayList<>();
        result.addAll(IDCounts.keySet());
        return result;
    }
    
    private boolean handleCommand(String text) {
        /*if("lim".equals(text)){
            try {
                consoleDoc.remove(0, consoleDoc.getLength());
                consoleDoc.insertString(consoleDoc.getLength(), "Initialized Modules:\n", stlBold);
                for (Module m : hub.getModules(NRFHub.ModuleInitFilter.INITIALIZED_MODULES)){
                    if (m.getmID() == 254 || IDConflicts.contains(m.getmID()))
                        consoleDoc.insertString(consoleDoc.getLength(), m.toString() + "\n", stlOrange);
                    else
                        consoleDoc.insertString(consoleDoc.getLength(), m.toString() + "\n", stlGreen);
                }
            } catch (BadLocationException ex){
                ex.printStackTrace();
                //TODO Log error here
            }
            return true;
        } else if ("lpm".equals(text)){
            try {
                consoleDoc.remove(0, consoleDoc.getLength());
                consoleDoc.insertString(consoleDoc.getLength(), "Pending Modules:", stlBold);
                for (Module m : hub.getModules(NRFHub.ModuleInitFilter.PENDING_MODULES)){
                    if (m.getmID() == 254 || IDConflicts.contains(m.getmID()))
                        consoleDoc.insertString(consoleDoc.getLength(), m.toString() + "\n", stlOrange);
                    else
                        consoleDoc.insertString(consoleDoc.getLength(), m.toString() + "\n", stlGreen);
                }
            } catch (BadLocationException ex){
                ex.printStackTrace();
                //TODO Log error here
            }
            return true;
        } else */
        if (text != null && text.startsWith("setup ")){
            Matcher m = Pattern.compile("setup (?<ID>\\d{1,3}),(?<TOKEN>\\d{1,3})").matcher(text);
            if (m.find()){
                Module module = hub.getModule(Integer.parseInt(m.group("ID")),Integer.parseInt(m.group("TOKEN")),NRFHub.ModuleInitFilter.ALL_MODULES);
                if (module != null) {
                    hub.forceSetupModule(module);
                    return true;
                }
            }
        } if (text != null && text.startsWith("alias ")){
            Matcher m = Pattern.compile("alias (?<ID>\\d{1,3}),(?<TOKEN>\\d{1,3}) (?<ALIAS>\\w*)").matcher(text);
            if (m.find()){
                Module module = hub.getModule(Integer.parseInt(m.group("ID")),Integer.parseInt(m.group("TOKEN")),NRFHub.ModuleInitFilter.ALL_MODULES);
                if (module != null) {
                    module.setAlias(m.group("ALIAS"));
                    return true;
                }
            }
        } else if (text != null && text.startsWith("rm ")){
            Matcher m = Pattern.compile("rm (?<ID>\\d{1,3})").matcher(text);
            if (m.find()){
                Module module = hub.getModule(Integer.parseInt(m.group("ID")),NRFHub.ModuleInitFilter.PENDING_MODULES);
                if (module != null) {
                    hub.initModule(module);
                    return true;
                }
            }
            
        } else if (text != null && text.startsWith("drm ")){
            Matcher m = Pattern.compile("drm (?<ID>\\d{1,3})").matcher(text);
            if (m.find()){
                Module module = hub.getModule(Integer.parseInt(m.group("ID")),NRFHub.ModuleInitFilter.INITIALIZED_MODULES);
                
                if (module != null){
                    hub.deregisterModule(module);
                    return true;
                }
            }
        } else if (text != null && text.startsWith("sid ")){
            Matcher m = Pattern.compile("(?<OID>\\d{1,3}),(?<OTK>\\d{1,3}),(?<NID>\\d{1,3}),(?<NTK>\\d{1,3})").matcher(text);
            if (m.find()){
                Module mod = hub.getModule(Integer.parseInt(m.group("OID")),Integer.parseInt(m.group("OTK")),NRFHub.ModuleInitFilter.ALL_MODULES);
                
                SerialTransmission tran = new SerialTransmission(SerialTransmission.DIRECTION.OUTGOING, mod.getmID(), mod.getmType(), 
                        CommandType.SET, "ID," + m.group("OTK") + "," + m.group("NID") + "," + m.group("NTK"));
                hub.transmit(tran, true);
                return true;
            }
        }
        return false;
    }
    
}
